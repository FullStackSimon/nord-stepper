{"version":3,"file":"ProgressBar.js","sources":["../src/progress-bar/ProgressBar.ts"],"sourcesContent":["import { LitElement, html } from \"lit\"\nimport { ifDefined } from \"lit/directives/if-defined.js\"\nimport { customElement, property } from \"lit/decorators.js\"\nimport { ref } from \"lit/directives/ref.js\"\nimport { FocusableMixin } from \"../common/mixins/FocusableMixin.js\"\n\nimport componentStyle from \"../common/styles/Component.css\"\nimport style from \"./ProgressBar.css\"\n\n/**\n * Progress Bar is used to visually represent the completion\n * of a task or process. It shows how much of the task has\n * been completed and how much is still left.\n *\n * @status ready\n * @category feedback\n *\n * @cssprop [--n-progress-size=var(--n-space-s)] - Controls the thickness of the progress bar, using our [spacing tokens](/tokens/#space).\n * @cssprop [--n-progress-border-radius=var(--n-border-radius-s)] - Controls how rounded the corners are, using [border radius tokens](/tokens/#border-radius).\n * @cssprop [--n-progress-color=var(--n-color-accent)] - Controls the color of the progress bar, using [color tokens](/tokens/#color).\n */\n@customElement(\"nord-progress-bar\")\nexport default class ProgressBar extends FocusableMixin(LitElement) {\n  static styles = [componentStyle, style]\n\n  /**\n   * Specifies how much of the task has been completed. Must be a valid floating\n   * point number between 0 and max, or between 0 and 100 if max is omitted. If\n   * there is no value, the progress bar is indeterminate; this indicates that\n   * an activity is ongoing with no indication of how long itâ€™s expected to take.\n   */\n  @property({ reflect: true, type: Number }) value?: number\n\n  /**\n   * Describes how much work the task indicated by the progress element requires.\n   * The max attribute, if present, must have a value greater than 0 and be a\n   * valid floating point number.\n   */\n  @property({ reflect: true, type: Number }) max: number = 100\n\n  /**\n   * Accessible label for the progress indicator. Visually hidden, but shown\n   * for assistive technology.\n   */\n  @property({ reflect: true }) label: string = \"Current progress\"\n\n  render() {\n    /**\n     * The Aria properties are required for now due to a Chrome bug.\n     * In the future we can probably get rid of them. For context:\n     * https://bugs.chromium.org/p/chromium/issues/detail?id=1310779\n     */\n    return html`<label>\n      <nord-visually-hidden>${this.label}</nord-visually-hidden>\n      <progress\n        ${ref(this.focusableRef)}\n        aria-valuenow=${ifDefined(this.value)}\n        aria-valuemin=\"0\"\n        aria-valuemax=${this.max}\n        tabindex=\"-1\"\n        max=${this.max}\n        value=${ifDefined(this.value)}\n      ></progress>\n    </label>`\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"nord-progress-bar\": ProgressBar\n  }\n}\n"],"names":["ProgressBar","FocusableMixin","LitElement","constructor","this","max","label","render","html","ref","focusableRef","ifDefined","value","styles","componentStyle","style","__decorate","property","reflect","type","Number","prototype","customElement"],"mappings":"w1DAsBe,IAAMA,EAAN,cAA0BC,EAAeC,IAAzC,WAAAC,uBAgB8BC,KAAGC,IAAW,IAM5BD,KAAKE,MAAW,kBAqB9C,CAnBC,MAAAC,GAME,OAAOC,CAAI,gCACeJ,KAAKE,yCAEzBG,EAAIL,KAAKM,gCACKC,EAAUP,KAAKQ,4CAEfR,KAAKC,2BAEfD,KAAKC,eACHM,EAAUP,KAAKQ,6BAG5B,GAzCMZ,EAAAa,OAAS,CAACC,EAAgBC,GAQUC,EAAA,CAA1CC,EAAS,CAAEC,SAAS,EAAMC,KAAMC,UAAwBpB,EAAAqB,UAAA,aAAA,GAOdL,EAAA,CAA1CC,EAAS,CAAEC,SAAS,EAAMC,KAAMC,UAA2BpB,EAAAqB,UAAA,WAAA,GAM/BL,EAAA,CAA5BC,EAAS,CAAEC,SAAS,KAA0ClB,EAAAqB,UAAA,aAAA,GAtB5CrB,EAAWgB,EAAA,CAD/BM,EAAc,sBACMtB,SAAAA"}