{"version":3,"file":"dates-lbaNvUdr.js","sources":["../src/common/dates.ts"],"sourcesContent":["const ISO_DATE_FORMAT = /^(\\d{4})-(\\d{2})-(\\d{2})$/\n\nexport const enum DaysOfWeek {\n  Sunday = 0,\n  Monday = 1,\n  Tuesday = 2,\n  Wednesday = 3,\n  Thursday = 4,\n  Friday = 5,\n  Saturday = 6,\n}\n\nexport function createDate(year: string, month: string, day: string): Date | undefined {\n  const dayInt = parseInt(day, 10)\n  const monthInt = parseInt(month, 10)\n  const yearInt = parseInt(year, 10)\n\n  const isValid =\n    Number.isInteger(yearInt) && // all parts should be integers\n    Number.isInteger(monthInt) &&\n    Number.isInteger(dayInt) &&\n    monthInt > 0 && // month must be 1-12\n    monthInt <= 12 &&\n    dayInt > 0 && // day must be 1-31\n    dayInt <= 31 &&\n    yearInt > 0\n\n  if (isValid) {\n    const date = new Date(yearInt, monthInt - 1, dayInt)\n    // this handles values where year is 0-99, which JS \"helpfully\" interprets as 1900-1999\n    date.setFullYear(yearInt)\n\n    return date\n  }\n\n  return undefined\n}\n\n/**\n * @param value date string in ISO format YYYY-MM-DD\n */\nexport function parseISODate(value: string): Date | undefined {\n  if (!value) {\n    return undefined\n  }\n\n  const matches = value.match(ISO_DATE_FORMAT)\n\n  if (matches) {\n    return createDate(matches[1], matches[2], matches[3])\n  }\n\n  return undefined\n}\n\n/**\n * print date in format YYYY-MM-DD\n * @param date\n */\nexport function printISODate(date: Date): string {\n  if (!date) {\n    return \"\"\n  }\n\n  const d = date.getDate().toString(10)\n  const m = (date.getMonth() + 1).toString(10)\n  const y = date.getFullYear().toString(10)\n\n  return `${y.padStart(4, \"0\")}-${m.padStart(2, \"0\")}-${d.padStart(2, \"0\")}`\n}\n\nfunction today() {\n  const date = new Date()\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0))\n}\n\nexport function getDayNames(locale: string, weekday: Exclude<Intl.DateTimeFormatOptions[\"weekday\"], undefined>) {\n  const days = []\n  const options = { weekday }\n  const day = today()\n\n  for (let i = 0; i < 7; i++) {\n    days[day.getDay()] = day.toLocaleDateString(locale, options)\n    day.setDate(day.getDate() + 1)\n  }\n\n  return days\n}\n\nexport function getMonthNames(locale: string, month: Exclude<Intl.DateTimeFormatOptions[\"month\"], undefined>) {\n  const months = []\n  const options = { month }\n\n  // set to first of the month, so that all dates are valid\n  const day = today()\n  day.setDate(1)\n\n  for (let i = 0; i < 12; i++) {\n    months[day.getMonth()] = day.toLocaleDateString(locale, options)\n    day.setMonth(day.getMonth() + 1)\n  }\n\n  return months\n}\n\n/**\n * Compare if two dates are in the same month of the same year.\n */\nexport function isEqualMonth(a?: Date, b?: Date): boolean {\n  if (a == null || b == null) {\n    return false\n  }\n\n  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth()\n}\n\n/**\n * Compare if two dates are equal in terms of day, month, and year\n */\nexport function isEqual(a?: Date, b?: Date): boolean {\n  if (a == null || b == null) {\n    return false\n  }\n\n  return isEqualMonth(a, b) && a.getDate() === b.getDate()\n}\n\nexport function addDays(date: Date, days: number): Date {\n  const d = new Date(date)\n  d.setDate(d.getDate() + days)\n  return d\n}\n\nexport function addMonths(date: Date, months: number): Date {\n  const d = new Date(date)\n  d.setMonth(date.getMonth() + months)\n  return d\n}\n\nexport function addYears(date: Date, years: number): Date {\n  const d = new Date(date)\n  d.setFullYear(date.getFullYear() + years)\n  return d\n}\n\nexport function startOfWeek(date: Date, firstDayOfWeek: DaysOfWeek = DaysOfWeek.Monday): Date {\n  const d = new Date(date)\n  const day = d.getDay()\n  const diff = (day < firstDayOfWeek ? 7 : 0) + day - firstDayOfWeek\n\n  d.setDate(d.getDate() - diff)\n  return d\n}\n\nexport function endOfWeek(date: Date, firstDayOfWeek: DaysOfWeek = DaysOfWeek.Monday): Date {\n  const d = new Date(date)\n  const day = d.getDay()\n  const diff = (day < firstDayOfWeek ? -7 : 0) + 6 - (day - firstDayOfWeek)\n\n  d.setDate(d.getDate() + diff)\n  return d\n}\n\nexport function startOfMonth(date: Date): Date {\n  const d = new Date(date.getFullYear(), date.getMonth(), 1)\n  d.setFullYear(date.getFullYear())\n  return d\n}\n\nexport function endOfMonth(date: Date): Date {\n  const d = new Date(date.getFullYear(), date.getMonth() + 1, 0)\n  d.setFullYear(date.getFullYear())\n  return d\n}\n\nexport function setMonth(date: Date, month: number): Date {\n  const d = new Date(date)\n  d.setMonth(month)\n  return d\n}\n\nexport function setYear(date: Date, year: number): Date {\n  const d = new Date(date)\n  d.setFullYear(year)\n  return d\n}\n\n/**\n * Ensures date is within range, returns min or max if out of bounds\n */\nexport function clamp(date: Date, min?: Date, max?: Date): Date {\n  const time = date.getTime()\n\n  if (min && min instanceof Date && time < min.getTime()) {\n    return min\n  }\n\n  if (max && max instanceof Date && time > max.getTime()) {\n    return max\n  }\n\n  return date\n}\n\n/**\n * Check if date is within a min and max\n */\nexport function inRange(date: Date, min?: Date, max?: Date): boolean {\n  return clamp(date, min, max) === date\n}\n\n/**\n * given start and end date, return an (inclusive) array of all dates in between\n * @param start\n * @param end\n */\nfunction getDaysInRange(start: Date, end: Date): Date[] {\n  const days: Date[] = []\n  let current = start\n\n  while (!isEqual(current, end)) {\n    days.push(current)\n    current = addDays(current, 1)\n  }\n\n  days.push(current)\n\n  return days\n}\n\n/**\n * given a date, return an array of dates from a calendar perspective\n * @param date\n * @param firstDayOfWeek\n */\nexport function getViewOfMonth(date: Date, firstDayOfWeek: DaysOfWeek = DaysOfWeek.Monday): Date[] {\n  const start = startOfWeek(startOfMonth(date), firstDayOfWeek)\n  const end = endOfWeek(endOfMonth(date), firstDayOfWeek)\n\n  return getDaysInRange(start, end)\n}\n"],"names":["ISO_DATE_FORMAT","createDate","year","month","day","dayInt","parseInt","monthInt","yearInt","Number","isInteger","date","Date","setFullYear","parseISODate","value","matches","match","printISODate","d","getDate","toString","m","getMonth","getFullYear","padStart","today","UTC","getDayNames","locale","weekday","days","options","i","getDay","toLocaleDateString","setDate","getMonthNames","months","setMonth","isEqualMonth","a","b","isEqual","addDays","startOfWeek","firstDayOfWeek","diff","endOfWeek","startOfMonth","endOfMonth","setYear","clamp","min","max","time","getTime","inRange","getViewOfMonth","start","end","current","push","getDaysInRange"],"mappings":"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"}