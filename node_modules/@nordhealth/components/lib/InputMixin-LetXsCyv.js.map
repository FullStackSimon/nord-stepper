{"version":3,"file":"InputMixin-LetXsCyv.js","sources":["../src/common/mixins/InputMixin.ts"],"sourcesContent":["/* eslint-disable max-classes-per-file */\nimport { LitElement } from \"lit\"\nimport { property } from \"lit/decorators.js\"\n\ntype Constructor<T = Record<string, unknown>> = new (...args: any[]) => T\n\nexport declare class InputMixinInterface {\n  name?: string\n  value: string\n  disabled: boolean\n  protected _formId?: string\n  set form(id: string)\n  get form(): HTMLFormElement | null\n}\n\nexport function InputMixin<T extends Constructor<LitElement>>(superClass: T): Constructor<InputMixinInterface> & T {\n  class InputElement extends superClass {\n    /**\n     * Makes the component disabled. This prevents users from\n     * being able to interact with the component, and conveys\n     * its inactive state to assistive technologies.\n     */\n    @property({ type: Boolean, reflect: true }) disabled = false\n\n    /**\n     * The name of the form component.\n     */\n    @property({ reflect: true }) name?: string\n\n    /**\n     * The value of the form component.\n     */\n    @property() value: string = \"\"\n\n    private formAncestor: HTMLFormElement | null = null\n    protected _formId?: string\n    set form(id: string) {\n      const oldVal = this._formId\n      this._formId = id\n      this.requestUpdate(\"form\", oldVal)\n    }\n\n    /**\n     * Gets the form, if any, associated with the form element.\n     * The setter accepts a string, which is the id of the form.\n     */\n    @property()\n    get form(): HTMLFormElement | null {\n      if (this._formId) {\n        const root = this.getRootNode() as ShadowRoot | Document\n        return root.querySelector<HTMLFormElement>(`form#${this._formId}`)\n      }\n      return this.formAncestor\n    }\n\n    connectedCallback() {\n      super.connectedCallback()\n      // we can cache this, since it will only change if the element is (re)connected\n      this.formAncestor = this.closest(\"form\")\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback()\n      this.formAncestor = null\n    }\n  }\n\n  return InputElement as unknown as Constructor<InputMixinInterface> & T\n}\n"],"names":["InputMixin","superClass","InputElement","constructor","this","disabled","value","formAncestor","form","id","oldVal","_formId","requestUpdate","getRootNode","querySelector","connectedCallback","super","closest","disconnectedCallback","__decorate","property","type","Boolean","reflect","prototype"],"mappings":"yFAeM,SAAUA,EAA8CC,GAC5D,MAAMC,UAAqBD,EAA3B,WAAAE,uBAM8CC,KAAQC,UAAG,EAU3CD,KAAKE,MAAW,GAEpBF,KAAYG,aAA2B,IA+BhD,CA7BC,QAAIC,CAAKC,GACP,MAAMC,EAASN,KAAKO,QACpBP,KAAKO,QAAUF,EACfL,KAAKQ,cAAc,OAAQF,EAC5B,CAOD,QAAIF,GACF,GAAIJ,KAAKO,QAAS,CAEhB,OADaP,KAAKS,cACNC,cAA+B,QAAQV,KAAKO,UACzD,CACD,OAAOP,KAAKG,YACb,CAED,iBAAAQ,GACEC,MAAMD,oBAENX,KAAKG,aAAeH,KAAKa,QAAQ,OAClC,CAED,oBAAAC,GACEF,MAAME,uBACNd,KAAKG,aAAe,IACrB,EAGH,OA7C8CY,EAAA,CAA3CC,EAAS,CAAEC,KAAMC,QAASC,SAAS,KAAwBrB,EAAAsB,UAAA,gBAAA,GAK/BL,EAAA,CAA5BC,EAAS,CAAEG,SAAS,KAAqBrB,EAAAsB,UAAA,YAAA,GAK9BL,EAAA,CAAXC,KAA6BlB,EAAAsB,UAAA,aAAA,GAe9BL,EAAA,CADCC,KAOAlB,EAAAsB,UAAA,OAAA,MAcItB,CACT"}