{"version":3,"file":"DropdownItem.js","sources":["../src/dropdown-item/DropdownItem.ts"],"sourcesContent":["import { LitElement, html, TemplateResult, nothing } from \"lit\"\nimport { customElement, property } from \"lit/decorators.js\"\nimport { ifDefined } from \"lit/directives/if-defined.js\"\nimport { ref } from \"lit/directives/ref.js\"\nimport { FocusableMixin } from \"../common/mixins/FocusableMixin.js\"\nimport { SlotController } from \"../common/controllers/SlotController.js\"\nimport { cond } from \"../common/directives/cond.js\"\n\nimport componentStyle from \"../common/styles/Component.css\"\nimport style from \"./DropdownItem.css\"\n\n/**\n * Dropdown item populates dropdown with actions. Items can be\n * placed either inside a dropdown group or directly inside a\n * dropdown component.\n *\n * @status ready\n * @category action\n * @slot - The dropdown item content.\n * @slot start - Used to place content before dropdown item text. Typically used for icons.\n * @slot end - Used to place content after dropdown item text. Typically used for icons.\n *\n * @cssprop [--n-dropdown-item-background-color=transparent] - Controls the background color of the item, using our [color tokens](/tokens/#color).\n * @cssprop [--n-dropdown-item-color=var(--n-color-text)] - Controls the color of the text within the item, using our [color tokens](/tokens/#color).\n */\n@customElement(\"nord-dropdown-item\")\nexport default class DropdownItem extends FocusableMixin(LitElement) {\n  static styles = [componentStyle, style]\n\n  private endSlot = new SlotController(this, \"end\")\n\n  /**\n   * The url the dropdown item should link to.\n   */\n  @property({ reflect: true }) href?: string\n\n  /**\n   * When provided together with a href property, determines where\n   * to open the linked URL. The keywords have special meanings for\n   * where to load the URL: “_self” means the current browsing context,\n   * “_blank” usually a new tab but users can configure browsers this to\n   * open a new window instead, “_parent” means the parent browsing\n   * context of the current one, but if no parent exists, behaves as\n   * _self, and finally “top” means the topmost browsing context.\n   */\n  @property() target: \"_self\" | \"_blank\" | \"_parent\" | \"_top\" = \"_self\"\n\n  /**\n   * Makes the component disabled. This prevents users from\n   * being able to interact with the component, and conveys\n   * its inactive state to assistive technologies.\n   */\n  @property({ type: Boolean, reflect: true }) disabled = false\n\n  render() {\n    const innards = html`\n      <slot name=\"start\"></slot>\n      <div class=\"n-content\"><slot></slot></div>\n      <slot name=\"end\" ?hidden=${this.endSlot.isEmpty}></slot>\n    `\n\n    return this.href ? this.renderLink(innards) : this.renderButton(innards)\n  }\n\n  /**\n   * We jump through some hoops here to ensure the link is treated correctly when \"disabled\".\n   * Links cannot be disabled natively, so we need to rely on some aria magic to get the correct semantics.\n   * Along with the advice in the article below, we also set tabindex to \"-1\", so it is taken out of tab order.\n   *\n   * @see https://www.scottohara.me/blog/2021/05/28/disabled-links.html\n   */\n  private renderLink(innards: TemplateResult) {\n    return html`\n      <a\n        ${ref(this.focusableRef)}\n        class=\"n-dropdown-item\"\n        target=${this.target}\n        href=${cond(this.disabled, nothing, this.href)}\n        tabindex=${cond(this.disabled, \"-1\")}\n        aria-disabled=${cond(this.disabled, \"true\")}\n        role=${cond(this.disabled, \"link\")}\n        >${innards}\n      </a>\n    `\n  }\n\n  private renderButton(innards: TemplateResult) {\n    return html`\n      <button ${ref(this.focusableRef)} class=\"n-dropdown-item\" ?disabled=${this.disabled}>${innards}</button>\n    `\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"nord-dropdown-item\": DropdownItem\n  }\n}\n"],"names":["DropdownItem","FocusableMixin","LitElement","constructor","this","endSlot","SlotController","target","disabled","render","innards","html","isEmpty","href","renderLink","renderButton","ref","focusableRef","cond","nothing","styles","componentStyle","style","__decorate","property","reflect","prototype","type","Boolean","customElement"],"mappings":"0dA0Be,IAAMA,EAAN,cAA2BC,EAAeC,IAA1C,WAAAC,uBAGLC,KAAOC,QAAG,IAAIC,EAAeF,KAAM,OAgB/BA,KAAMG,OAA4C,QAOlBH,KAAQI,UAAG,CAuCxD,CArCC,MAAAC,GACE,MAAMC,EAAUC,CAAI,iGAGSP,KAAKC,QAAQO,mBAG1C,OAAOR,KAAKS,KAAOT,KAAKU,WAAWJ,GAAWN,KAAKW,aAAaL,EACjE,CASO,UAAAI,CAAWJ,GACjB,OAAOC,CAAI,MAELK,EAAIZ,KAAKa,iDAEFb,KAAKG,iBACPW,EAAKd,KAAKI,SAAUW,EAASf,KAAKS,oBAC9BK,EAAKd,KAAKI,SAAU,yBACfU,EAAKd,KAAKI,SAAU,kBAC7BU,EAAKd,KAAKI,SAAU,YACxBE,OAGR,CAEO,YAAAK,CAAaL,GACnB,OAAOC,CAAI,WACCK,EAAIZ,KAAKa,oDAAmDb,KAAKI,aAAYE,YAE1F,GA/DMV,EAAAoB,OAAS,CAACC,EAAgBC,GAOJC,EAAA,CAA5BC,EAAS,CAAEC,SAAS,KAAqBzB,EAAA0B,UAAA,YAAA,GAW9BH,EAAA,CAAXC,KAAoExB,EAAA0B,UAAA,cAAA,GAOzBH,EAAA,CAA3CC,EAAS,CAAEG,KAAMC,QAASH,SAAS,KAAwBzB,EAAA0B,UAAA,gBAAA,GA1BzC1B,EAAYuB,EAAA,CADhCM,EAAc,uBACM7B,SAAAA"}