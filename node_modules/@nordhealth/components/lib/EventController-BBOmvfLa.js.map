{"version":3,"file":"EventController-BBOmvfLa.js","sources":["../src/common/controllers/EventController.ts"],"sourcesContent":["import { ReactiveController, ReactiveControllerHost, isServer } from \"lit\"\n\ninterface ShadowRootEventMap {\n  slotchange: Event\n}\n\nexport class EventController implements ReactiveController {\n  private listeners: Array<() => void> = []\n\n  constructor(host: ReactiveControllerHost) {\n    host.addController(this)\n  }\n\n  hostDisconnected() {\n    this.listeners.forEach(stop => stop())\n    this.listeners = []\n  }\n\n  listen<K extends keyof WindowEventMap>(\n    window: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void\n\n  listen<K extends keyof DocumentEventMap>(\n    document: Document,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void\n\n  listen<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void\n\n  listen<K extends keyof ShadowRootEventMap>(\n    element: ShadowRoot,\n    type: K,\n    listener: (this: ShadowRoot, ev: ShadowRootEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void\n\n  listen<K extends keyof MediaQueryListEventMap>(\n    element: MediaQueryList,\n    type: K,\n    listener: (this: ShadowRoot, ev: MediaQueryListEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void\n\n  listen(\n    element: EventTarget,\n    type: string,\n    listener: (this: EventTarget, ev: Event) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void\n\n  listen(\n    element: EventTarget,\n    type: string,\n    listener: (this: EventTarget, ev: Event) => void,\n    options?: boolean | AddEventListenerOptions\n  ) {\n    element?.addEventListener(type, listener, options)\n\n    const stop = () => element?.removeEventListener(type, listener, options)\n    this.listeners.push(stop)\n  }\n}\n"],"names":["EventController","constructor","host","this","listeners","addController","hostDisconnected","forEach","stop","listen","element","type","listener","options","addEventListener","push","removeEventListener"],"mappings":"MAMaA,EAGX,WAAAC,CAAYC,GAFJC,KAASC,UAAsB,GAGrCF,EAAKG,cAAcF,KACpB,CAED,gBAAAG,GACEH,KAAKC,UAAUG,SAAQC,GAAQA,MAC/BL,KAAKC,UAAY,EAClB,CA4CD,MAAAK,CACEC,EACAC,EACAC,EACAC,GAEAH,SAAAA,EAASI,iBAAiBH,EAAMC,EAAUC,GAG1CV,KAAKC,UAAUW,MADF,IAAML,aAAO,EAAPA,EAASM,oBAAoBL,EAAMC,EAAUC,IAEjE"}