{"version":3,"file":"TextSelectableMixin-Cfv__lHS.js","sources":["../src/common/mixins/TextSelectableMixin.ts"],"sourcesContent":["/* eslint-disable max-classes-per-file */\n\nimport { LitElement } from \"lit\"\nimport { createRef, Ref } from \"lit/directives/ref.js\"\nimport { InputMixinInterface } from \"./InputMixin.js\"\n\ntype Constructable<T = Record<string, unknown>> = new (...args: any[]) => T\n\nexport declare class TextSelectableMixinInterface {\n  protected textSelectableRef: Ref<HTMLInputElement | HTMLTextAreaElement>\n  set selectionStart(value: number | null)\n  get selectionStart(): number | null\n  set selectionEnd(value: number | null)\n  get selectionEnd(): number | null\n  select(): void\n  setSelectionRange(start: number | null, end: number | null, direction?: \"forward\" | \"backward\" | \"none\"): void\n  setRangeText(\n    replacement: string,\n    start?: number,\n    end?: number,\n    selectMode?: \"select\" | \"start\" | \"end\" | \"preserve\"\n  ): void\n}\n\nexport function TextSelectableMixin<T extends Constructable<InputMixinInterface & LitElement>>(superClass: T) {\n  class TextSelectableElement extends superClass {\n    protected textSelectableRef = createRef<HTMLInputElement | HTMLTextAreaElement>()\n\n    /**\n     * Gets or sets the starting position or offset of a text selection.\n     *\n     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/selectionStart)\n     */\n    set selectionStart(value: number | null) {\n      if (this.textSelectableRef.value) {\n        this.textSelectableRef.value.selectionStart = value\n      }\n    }\n\n    get selectionStart() {\n      return this.textSelectableRef.value?.selectionStart ?? null\n    }\n\n    /**\n     * Gets or sets the end position or offset of a text selection.\n     *\n     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/selectionEnd)\n     */\n    set selectionEnd(value: number | null) {\n      if (this.textSelectableRef.value) {\n        this.textSelectableRef.value.selectionEnd = value\n      }\n    }\n\n    get selectionEnd() {\n      return this.textSelectableRef.value?.selectionEnd ?? null\n    }\n\n    /**\n     * Gets or sets the direction in which selection occurred.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionDirection)\n     */\n    set selectionDirection(value: \"forward\" | \"backward\" | \"none\" | null) {\n      if (this.textSelectableRef.value) {\n        this.textSelectableRef.value.selectionDirection = value\n      }\n    }\n\n    get selectionDirection() {\n      return this.textSelectableRef.value?.selectionDirection ?? null\n    }\n\n    /**\n     * Selects all the text in the text field.\n     *\n     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select)\n     */\n    select() {\n      if (this.textSelectableRef.value) {\n        this.textSelectableRef.value.select()\n      }\n    }\n\n    /**\n     * Sets the start and end positions of a selection in the text field.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setSelectionRange)\n     *\n     * @param start The offset into the text field for the start of the selection.\n     * @param end The offset into the text field for the end of the selection.\n     * @param direction The direction in which the selection is performed.\n     */\n    setSelectionRange(start: number | null, end: number | null, direction?: \"forward\" | \"backward\" | \"none\") {\n      if (this.textSelectableRef.value) {\n        this.textSelectableRef.value.setSelectionRange(start, end, direction)\n      }\n    }\n\n    /**\n     * Replaces a range of text with a new string.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setRangeText)\n     *\n     * @param replacement The string to insert.\n     * @param start The 0-based index of the first character to replace. Defaults to the current `selectionStart` value (the start of the user's current selection).\n     * @param end The 0-based index of the character after the last character to replace. Defaults to the current `selectionEnd` value (the end of the user's current selection).\n     * @param selectMode A string defining how the selection should be set after the text has been replaced.\n     */\n    setRangeText(\n      replacement: string,\n      start?: number,\n      end?: number,\n      selectMode: \"select\" | \"start\" | \"end\" | \"preserve\" = \"preserve\"\n    ) {\n      if (this.textSelectableRef.value) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const selectionStart = start ?? this.textSelectableRef.value.selectionStart!\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const selectionEnd = end ?? this.textSelectableRef.value.selectionEnd!\n\n        this.textSelectableRef.value.setRangeText(replacement, selectionStart, selectionEnd, selectMode)\n\n        if (this.value !== this.textSelectableRef.value.value) {\n          this.value = this.textSelectableRef.value.value\n        }\n      }\n    }\n\n    /**\n     * Returns the native `<input>` or `<textarea>` element used under the hood.\n     */\n    async getNativeElement() {\n      // wait for the element to be rendered\n      await this.updateComplete\n\n      return this.textSelectableRef.value\n    }\n  }\n\n  return TextSelectableElement as unknown as Constructable<TextSelectableMixinInterface> & T\n}\n"],"names":["TextSelectableMixin","superClass","constructor","this","textSelectableRef","createRef","selectionStart","value","_b","_a","selectionEnd","selectionDirection","select","setSelectionRange","start","end","direction","setRangeText","replacement","selectMode","getNativeElement","updateComplete"],"mappings":"kDAwBM,SAAUA,EAA+EC,GAoH7F,OAnHA,cAAoCA,EAApC,WAAAC,uBACYC,KAAiBC,kBAAGC,GAgH/B,CAzGC,kBAAIC,CAAeC,GACbJ,KAAKC,kBAAkBG,QACzBJ,KAAKC,kBAAkBG,MAAMD,eAAiBC,EAEjD,CAED,kBAAID,WACF,OAAuD,QAAhDE,EAA8B,QAA9BC,EAAAN,KAAKC,kBAAkBG,aAAO,IAAAE,OAAA,EAAAA,EAAAH,sBAAkB,IAAAE,EAAAA,EAAA,IACxD,CAOD,gBAAIE,CAAaH,GACXJ,KAAKC,kBAAkBG,QACzBJ,KAAKC,kBAAkBG,MAAMG,aAAeH,EAE/C,CAED,gBAAIG,WACF,OAAqD,QAA9CF,EAA8B,QAA9BC,EAAAN,KAAKC,kBAAkBG,aAAO,IAAAE,OAAA,EAAAA,EAAAC,oBAAgB,IAAAF,EAAAA,EAAA,IACtD,CAOD,sBAAIG,CAAmBJ,GACjBJ,KAAKC,kBAAkBG,QACzBJ,KAAKC,kBAAkBG,MAAMI,mBAAqBJ,EAErD,CAED,sBAAII,WACF,OAA2D,QAApDH,EAA8B,QAA9BC,EAAAN,KAAKC,kBAAkBG,aAAO,IAAAE,OAAA,EAAAA,EAAAE,0BAAsB,IAAAH,EAAAA,EAAA,IAC5D,CAOD,MAAAI,GACMT,KAAKC,kBAAkBG,OACzBJ,KAAKC,kBAAkBG,MAAMK,QAEhC,CAWD,iBAAAC,CAAkBC,EAAsBC,EAAoBC,GACtDb,KAAKC,kBAAkBG,OACzBJ,KAAKC,kBAAkBG,MAAMM,kBAAkBC,EAAOC,EAAKC,EAE9D,CAYD,YAAAC,CACEC,EACAJ,EACAC,EACAI,EAAsD,YAEtD,GAAIhB,KAAKC,kBAAkBG,MAAO,CAEhC,MAAMD,EAAiBQ,QAAAA,EAASX,KAAKC,kBAAkBG,MAAMD,eAEvDI,EAAeK,QAAAA,EAAOZ,KAAKC,kBAAkBG,MAAMG,aAEzDP,KAAKC,kBAAkBG,MAAMU,aAAaC,EAAaZ,EAAgBI,EAAcS,GAEjFhB,KAAKI,QAAUJ,KAAKC,kBAAkBG,MAAMA,QAC9CJ,KAAKI,MAAQJ,KAAKC,kBAAkBG,MAAMA,MAE7C,CACF,CAKD,sBAAMa,GAIJ,aAFMjB,KAAKkB,eAEJlB,KAAKC,kBAAkBG,KAC/B,EAIL"}