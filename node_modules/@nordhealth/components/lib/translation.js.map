{"version":3,"file":"translation.js","sources":["../src/localization/translation.ts"],"sourcesContent":["import { isServer } from \"lit\"\nimport en from \"./en-us.js\"\n\n// gets list of properties beginning prefix\ntype PickStartsWith<T, Prefix extends string> = T extends `${Prefix}${string}` ? T : never\n\nexport type Translation = typeof en\nexport type WellKnownKeys = PickStartsWith<keyof Translation, \"$\">\n\nconst documentLangSubscribers = new Set<() => void>()\nconst translationRegistrationSubscribers = new Set<() => void>()\nconst translations = new Map<string, Translation>()\n\nfunction notifyDocumentLangChange() {\n  for (const subscriber of documentLangSubscribers) {\n    subscriber()\n  }\n}\n\nfunction notifyTranslationRegistration() {\n  for (const subscriber of translationRegistrationSubscribers) {\n    subscriber()\n  }\n}\n\n// observe changes to the document's lang\nif (!isServer) {\n  const observer = new MutationObserver(notifyDocumentLangChange)\n\n  observer.observe(document.documentElement, {\n    attributes: true,\n    attributeFilter: [\"lang\"],\n  })\n}\n\n/**\n * Removes all registered translations\n */\nexport function clearTranslations() {\n  translations.clear()\n}\n\n/**\n * Registers one or more translations\n */\nexport function registerTranslation(...translation: Translation[]) {\n  translation.forEach(t => {\n    const lang = t.$lang.toLowerCase()\n    translations.set(lang, t)\n  })\n\n  notifyTranslationRegistration()\n}\n\n/**\n * subscribe to document language changes\n * @param onChange callback for when document `lang` attr changes\n * @returns cleanup function\n */\nexport function subscribeToDocumentLang(onChange: () => void): () => void {\n  documentLangSubscribers.add(onChange)\n  return () => documentLangSubscribers.delete(onChange)\n}\n\n/**\n * subscribe to translation registration changes\n * @param onChange callback for when new translations are registered\n * @returns cleanup function\n */\nexport function subscribeToTranslationRegistration(onChange: () => void): () => void {\n  translationRegistrationSubscribers.add(onChange)\n  return () => translationRegistrationSubscribers.delete(onChange)\n}\n\n/**\n * Check whether there is a translation registered for the given lang\n * @param lang the lang code e.g. \"en\" or \"en-GB\"\n */\nexport function isTranslationRegistered(lang: string) {\n  return translations.has(lang)\n}\n\n/**\n * Picks the most appropriate translation for the given language, from most specific to least specific.\n * First tries lang + region, then lang only, then fallback.\n */\nexport function resolveTranslation(langCode: string) {\n  const lang = langCode.toLowerCase()\n  const [langOnly] = lang.split(\"-\")\n\n  return translations.get(lang) || translations.get(langOnly) || en\n}\n\nexport { en as fallback }\n"],"names":["documentLangSubscribers","Set","translationRegistrationSubscribers","translations","Map","isServer","MutationObserver","subscriber","observe","document","documentElement","attributes","attributeFilter","clearTranslations","clear","registerTranslation","translation","forEach","t","lang","$lang","toLowerCase","set","notifyTranslationRegistration","subscribeToDocumentLang","onChange","add","delete","subscribeToTranslationRegistration","isTranslationRegistered","has","resolveTranslation","langCode","langOnly","split","get","en"],"mappings":"2SASA,MAAMA,EAA0B,IAAIC,IAC9BC,EAAqC,IAAID,IACzCE,EAAe,IAAIC,IAezB,IAAKC,EAAU,CACI,IAAIC,kBAdvB,WACE,IAAK,MAAMC,KAAcP,EACvBO,GAEJ,IAYWC,QAAQC,SAASC,gBAAiB,CACzCC,YAAY,EACZC,gBAAiB,CAAC,SAEtB,UAKgBC,IACdV,EAAaW,OACf,CAKgB,SAAAC,KAAuBC,GACrCA,EAAYC,SAAQC,IAClB,MAAMC,EAAOD,EAAEE,MAAMC,cACrBlB,EAAamB,IAAIH,EAAMD,EAAE,IA7B7B,WACE,IAAK,MAAMX,KAAcL,EACvBK,GAEJ,CA4BEgB,EACF,CAOM,SAAUC,EAAwBC,GAEtC,OADAzB,EAAwB0B,IAAID,GACrB,IAAMzB,EAAwB2B,OAAOF,EAC9C,CAOM,SAAUG,EAAmCH,GAEjD,OADAvB,EAAmCwB,IAAID,GAChC,IAAMvB,EAAmCyB,OAAOF,EACzD,CAMM,SAAUI,EAAwBV,GACtC,OAAOhB,EAAa2B,IAAIX,EAC1B,CAMM,SAAUY,EAAmBC,GACjC,MAAMb,EAAOa,EAASX,eACfY,GAAYd,EAAKe,MAAM,KAE9B,OAAO/B,EAAagC,IAAIhB,IAAShB,EAAagC,IAAIF,IAAaG,CACjE"}