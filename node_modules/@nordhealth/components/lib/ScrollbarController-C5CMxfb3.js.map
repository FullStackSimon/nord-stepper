{"version":3,"file":"ScrollbarController-C5CMxfb3.js","sources":["../src/common/controllers/ScrollbarController.ts"],"sourcesContent":["import { ReactiveController, ReactiveControllerHost } from \"lit\"\n\n/**\n * We can have any number of components open at a time, all of which lock scroll.\n * Consider multiple modals being open, plus some popouts, etc.\n *\n * So we need some bookkeeping to know when to unlock scroll...\n *\n * But we can't simply keep a count of how many components are open,\n * since a misbehaving component may call lockScroll() multiple times.\n *\n * Nor can we rely on the first component to call lockScroll() to be the last to unlockScroll(),\n * since we cannot guarantee order of operations.\n *\n * Therefore, we track instances of ScrollbarController in a Set,\n * and only unlock scroll when the set is empty.\n *\n * We also need to be careful to restore any styles that were there\n * before we locked scroll.\n */\nexport class ScrollbarController implements ReactiveController {\n  private static locks = new Set<ScrollbarController>()\n  private static resets: Array<() => void> = []\n\n  constructor(host: ReactiveControllerHost) {\n    host.addController(this)\n  }\n\n  hostDisconnected() {\n    this.unlockScroll()\n  }\n\n  lockScroll() {\n    if (ScrollbarController.locks.size === 0) {\n      const documentWidth = document.documentElement.clientWidth\n      const width = Math.abs(window.innerWidth - documentWidth)\n\n      const computedStyle = getComputedStyle(document.body)\n      const paddingRight = parseInt(computedStyle.paddingRight, 10) || 0\n\n      // hiding the scrollbar slightly increases the width of the inner viewport.\n      // this is fine for the modal, since it is accounted for there. but it causes layout shift for any other fixed position components/elements.\n      // so we define a custom property here for the gutter value, since it can be inherited/used by any other component that has a fixed position e.g. toast-group.\n      ScrollbarController.setStyle(\"--n-scrollbar-gutter\", `${width + paddingRight}px`)\n      ScrollbarController.setStyle(\"overflow\", \"hidden\")\n      // use physical padding property rather than the logical equivalent, since the scrollbar is on always right side of the viewport, even in RTL.\n      ScrollbarController.setStyle(\"padding-right\", `var(--n-scrollbar-gutter)`)\n    }\n\n    ScrollbarController.locks.add(this)\n  }\n\n  unlockScroll() {\n    ScrollbarController.locks.delete(this)\n\n    if (ScrollbarController.locks.size === 0) {\n      ScrollbarController.resets.forEach(reset => reset())\n      ScrollbarController.resets = []\n    }\n  }\n\n  private static setStyle(property: string, value: string) {\n    const { style } = document.body\n\n    const previous = style.getPropertyValue(property)\n    style.setProperty(property, value)\n\n    ScrollbarController.resets.push(() => style.setProperty(property, previous))\n  }\n}\n"],"names":["ScrollbarController","constructor","host","addController","this","hostDisconnected","unlockScroll","lockScroll","locks","size","documentWidth","document","documentElement","clientWidth","width","Math","abs","window","innerWidth","computedStyle","getComputedStyle","body","paddingRight","parseInt","setStyle","add","delete","resets","forEach","reset","property","value","style","previous","getPropertyValue","setProperty","push","Set"],"mappings":"MAoBaA,EAIX,WAAAC,CAAYC,GACVA,EAAKC,cAAcC,KACpB,CAED,gBAAAC,GACED,KAAKE,cACN,CAED,UAAAC,GACE,GAAuC,IAAnCP,EAAoBQ,MAAMC,KAAY,CACxC,MAAMC,EAAgBC,SAASC,gBAAgBC,YACzCC,EAAQC,KAAKC,IAAIC,OAAOC,WAAaR,GAErCS,EAAgBC,iBAAiBT,SAASU,MAC1CC,EAAeC,SAASJ,EAAcG,aAAc,KAAO,EAKjEtB,EAAoBwB,SAAS,uBAAwB,GAAGV,EAAQQ,OAChEtB,EAAoBwB,SAAS,WAAY,UAEzCxB,EAAoBwB,SAAS,gBAAiB,4BAC/C,CAEDxB,EAAoBQ,MAAMiB,IAAIrB,KAC/B,CAED,YAAAE,GACEN,EAAoBQ,MAAMkB,OAAOtB,MAEM,IAAnCJ,EAAoBQ,MAAMC,OAC5BT,EAAoB2B,OAAOC,SAAQC,GAASA,MAC5C7B,EAAoB2B,OAAS,GAEhC,CAEO,eAAOH,CAASM,EAAkBC,GACxC,MAAMC,MAAEA,GAAUrB,SAASU,KAErBY,EAAWD,EAAME,iBAAiBJ,GACxCE,EAAMG,YAAYL,EAAUC,GAE5B/B,EAAoB2B,OAAOS,MAAK,IAAMJ,EAAMG,YAAYL,EAAUG,IACnE,EA/CcjC,EAAAQ,MAAQ,IAAI6B,IACZrC,EAAM2B,OAAsB"}