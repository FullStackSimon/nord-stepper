import { LitElement } from "lit";
import { FormDataController } from "../common/controllers/FormDataController.js";
declare const Tag_base: (new (...args: any[]) => import("../common/mixins/InputMixin.js").InputMixinInterface) & (new (...args: any[]) => import("../common/mixins/FocusableMixin.js").FocusableMixinInterface) & typeof LitElement;
/**
 * Tags represent a set of keywords that help label, categorize,
 * and organize objects. Commonly used to signify the attributes of an object.
 *
 * @status new
 * @category text
 * @slot - The tag content.
 *
 * @localization removeLabel - Accessible label for the remove button.
 */
export default class Tag extends Tag_base {
    static styles: import("lit").CSSResult[];
    private localize;
    protected formData: FormDataController;
    protected get formValue(): string | undefined;
    protected inputId: string;
    /**
     * The behavioral variant of the tag.
     */
    variant: "default" | "removable" | "selectable";
    /**
     * Controls whether the tag is checked or not (only relevant when variant is set to `selectable`).
     */
    checked: boolean;
    /**
     * The size of the tag. This affects the font-size.
     */
    size: "s" | "m";
    /**
     * Controls whether the tag expands to fill the width of its container.
     */
    expand: boolean;
    protected handleChange(e: Event): void;
    protected handleRemove(): void;
    render(): import("lit").TemplateResult<1>;
    private renderStaticTag;
    private renderRemovableTag;
    private renderSelectableTag;
}
declare global {
    interface HTMLElementTagNameMap {
        "nord-tag": Tag;
    }
}
export {};
