import { LitElement } from "lit";
import { LightDomController } from "../common/controllers/LightDomController.js";
import { LightSlotController } from "../common/controllers/LightSlotController.js";
declare const SegmentedControlItem_base: (new (...args: any[]) => import("../common/mixins/InputMixin.js").InputMixinInterface) & (new (...args: any[]) => import("../common/mixins/FocusableMixin.js").FocusableMixinInterface) & typeof LitElement;
/**
 * Segmented control items populate a segmented control with options.
 * Every item should be placed inside a segmented control.
 *
 * @status new
 * @category action
 * @slot label - Use when a label requires more than plain text.
 *
 * @cssprop [--n-segmented-control-item-border-radius=var(--n-border-radius-s)] - Controls the rounded corners of the item, using [border radius tokens](/tokens/#border-radius).
 * @cssprop [--n-segmented-control-item-gap=var(--n-space-xs)] - Controls the spacing between elements within the item, using our [spacing tokens](/tokens/#space).
 * @cssprop [--n-segmented-control-item-gradient=linear-gradient(to bottom, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.013) 100%))] - Controls the overlayed gradient background on the item.
 * @cssprop [--n-segmented-control-item-background-color=var(--n-color-nav-hover)] - Controls the background color of the item, using our [color tokens](/tokens/#color).
 * @cssprop [--n-segmented-control-item-color=var(--n-color-text-weaker)] - Controls the color of the text within the item, using our [color tokens](/tokens/#color).
 * @cssprop [--n-segmented-control-item-padding-inline=calc(var(--n-space-m) / 1.2)] - Controls the inline, or left and right, padding of the item.
 * @cssprop [--n-segmented-control-item-box-shadow=none] - Controls the surrounding shadow, using our [box shadow tokens](/tokens/#box-shadow).
 * @cssprop [--n-segmented-control-item-font-size=var(--n-font-size-m)] - Controls the size of the text within the item, using our [font tokens](/tokens/#font).
 * @cssprop [--n-segmented-control-item-font-weight=var(--n-font-weight)] - Controls the weight of the text within the item, using our [font tokens](/tokens/#font).
 * @cssprop [--n-segmented-control-item-min-block-size=calc(var(--n-space-xl) - 2px)] - Controls the minimum block size, or height, of the item using our [spacing tokens](/tokens/#space).
 * @cssprop [--n-segmented-control-item-inline-size=auto] - Controls the inline size of the item.
 */
export default class SegmentedControlItem extends SegmentedControlItem_base {
    static styles: import("lit").CSSResult[];
    protected inputId: string;
    /**
     * For accessibility reasons, we render the form parts of the component to the light DOM.
     */
    protected inputSlot: LightDomController;
    protected labelSlot: LightSlotController;
    /**
     * Controls whether the segmented control item is checked or not.
     */
    checked: boolean;
    /**
     * The size of the segmented control item.
     * This affects font-size and padding.
     */
    size: "s" | "m" | "l";
    /**
     * Label for the segmented control item.
     */
    label: string;
    render(): import("lit").TemplateResult<1>;
    protected handleCheckedChange(previousChecked: boolean): void;
    private uncheckSiblings;
    protected handleChange(e: Event): void;
    private handleBlur;
    private handleFocus;
    protected handleInput(e: Event): void;
}
declare global {
    interface HTMLElementTagNameMap {
        "nord-segmented-control-item": SegmentedControlItem;
    }
}
export {};
