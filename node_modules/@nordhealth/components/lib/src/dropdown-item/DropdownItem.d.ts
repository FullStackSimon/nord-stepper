import { LitElement, TemplateResult } from "lit";
declare const DropdownItem_base: (new (...args: any[]) => import("../common/mixins/FocusableMixin.js").FocusableMixinInterface) & typeof LitElement;
/**
 * Dropdown item populates dropdown with actions. Items can be
 * placed either inside a dropdown group or directly inside a
 * dropdown component.
 *
 * @status ready
 * @category action
 * @slot - The dropdown item content.
 * @slot start - Used to place content before dropdown item text. Typically used for icons.
 * @slot end - Used to place content after dropdown item text. Typically used for icons.
 *
 * @cssprop [--n-dropdown-item-background-color=transparent] - Controls the background color of the item, using our [color tokens](/tokens/#color).
 * @cssprop [--n-dropdown-item-color=var(--n-color-text)] - Controls the color of the text within the item, using our [color tokens](/tokens/#color).
 */
export default class DropdownItem extends DropdownItem_base {
    static styles: import("lit").CSSResult[];
    private endSlot;
    /**
     * The url the dropdown item should link to.
     */
    href?: string;
    /**
     * When provided together with a href property, determines where
     * to open the linked URL. The keywords have special meanings for
     * where to load the URL: “_self” means the current browsing context,
     * “_blank” usually a new tab but users can configure browsers this to
     * open a new window instead, “_parent” means the parent browsing
     * context of the current one, but if no parent exists, behaves as
     * _self, and finally “top” means the topmost browsing context.
     */
    target: "_self" | "_blank" | "_parent" | "_top";
    /**
     * Makes the component disabled. This prevents users from
     * being able to interact with the component, and conveys
     * its inactive state to assistive technologies.
     */
    disabled: boolean;
    render(): TemplateResult<1>;
    /**
     * We jump through some hoops here to ensure the link is treated correctly when "disabled".
     * Links cannot be disabled natively, so we need to rely on some aria magic to get the correct semantics.
     * Along with the advice in the article below, we also set tabindex to "-1", so it is taken out of tab order.
     *
     * @see https://www.scottohara.me/blog/2021/05/28/disabled-links.html
     */
    private renderLink;
    private renderButton;
}
declare global {
    interface HTMLElementTagNameMap {
        "nord-dropdown-item": DropdownItem;
    }
}
export {};
