import { LitElement } from "lit";
declare const ProgressBar_base: (new (...args: any[]) => import("../common/mixins/FocusableMixin.js").FocusableMixinInterface) & typeof LitElement;
/**
 * Progress Bar is used to visually represent the completion
 * of a task or process. It shows how much of the task has
 * been completed and how much is still left.
 *
 * @status ready
 * @category feedback
 *
 * @cssprop [--n-progress-size=var(--n-space-s)] - Controls the thickness of the progress bar, using our [spacing tokens](/tokens/#space).
 * @cssprop [--n-progress-border-radius=var(--n-border-radius-s)] - Controls how rounded the corners are, using [border radius tokens](/tokens/#border-radius).
 * @cssprop [--n-progress-color=var(--n-color-accent)] - Controls the color of the progress bar, using [color tokens](/tokens/#color).
 */
export default class ProgressBar extends ProgressBar_base {
    static styles: import("lit").CSSResult[];
    /**
     * Specifies how much of the task has been completed. Must be a valid floating
     * point number between 0 and max, or between 0 and 100 if max is omitted. If
     * there is no value, the progress bar is indeterminate; this indicates that
     * an activity is ongoing with no indication of how long itâ€™s expected to take.
     */
    value?: number;
    /**
     * Describes how much work the task indicated by the progress element requires.
     * The max attribute, if present, must have a value greater than 0 and be a
     * valid floating point number.
     */
    max: number;
    /**
     * Accessible label for the progress indicator. Visually hidden, but shown
     * for assistive technology.
     */
    label: string;
    render(): import("lit").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        "nord-progress-bar": ProgressBar;
    }
}
export {};
