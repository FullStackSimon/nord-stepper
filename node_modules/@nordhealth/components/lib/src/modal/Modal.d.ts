import { LitElement } from "lit";
import "../footer/Footer.js";
/**
 * Modal component is used to display content that temporarily blocks interactions
 * with the main view of an application. Modal should be used sparingly and
 * only when necessary.
 *
 * @status ready
 * @category overlay
 * @slot - Default slot
 * @slot header - Slot which holds the header of the modal, positioned next to the close button.
 * @slot feature - Slot for full bleed content like an image.
 * @slot footer - Slot which is typically used to hold call to action buttons, but can also be used to build custom footers.
 * @fires cancel - Dispatched before the modal has closed when a user attempts to dismiss a modal. Call `preventDefault()` on the event to prevent the modal closing.
 * @fires close - Dispatched when a modal is closed for any reason.
 *
 * @cssprop [--n-modal-padding-inline=var(--n-space-m)] - Controls the padding on the sides of the modal, using our [spacing tokens](/tokens/#space).
 * @cssprop [--n-modal-padding-block=var(--n-space-m)] - Controls the padding above and below the header of the modal, using our [spacing tokens](/tokens/#space).
 * @cssprop [--n-modal-max-inline-size=620px] - Controls the width of the modal.
 *
 * @localization closeLabel - Accessible label for the close button.
 */
export default class Modal extends LitElement {
    static styles: import("lit").CSSResult[];
    private modal;
    private backdrop;
    private defaultSlot;
    private headerSlot;
    private featureSlot;
    private footerSlot;
    private localize;
    private modalController;
    /**
     * Controls whether the modal is open or not.
     */
    open: boolean;
    /**
     * Controls the max-width of the modal when open.
     */
    size: "s" | "m" | "l" | "xl";
    /**
     * The reason why the modal was closed. This typically indicates
     * which button the user pressed to close the modal, though any value
     * can be supplied if the modal is programmatically closed.
     */
    returnValue: string;
    /**
     * By default if a modal is too big for the browser window,
     * the entire modal will scroll. This setting changes that behavior
     * so that the body of the modal scrolls instead, with the modal
     * itself remaining fixed.
     */
    scrollable: boolean;
    connectedCallback(): void;
    /**
     * Show the modal, automatically moving focus to the modal or a child
     * element with an `autofocus` attribute.
     */
    showModal(): void;
    /**
     * Programmatically close the modal.
     * @param returnValue An optional value to indicate why the modal was closed.
     */
    close(returnValue?: string): void;
    /**
     * Programmatically focus the modal.
     * @param options An object which controls aspects of the focusing process.
     */
    focus(options?: FocusOptions): void;
    render(): import("lit").TemplateResult<1>;
    protected handleOpenUpdated(prev: boolean): void;
    private handleDismiss;
}
declare global {
    interface HTMLElementTagNameMap {
        "nord-modal": Modal;
    }
}
