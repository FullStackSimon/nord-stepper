import { LitElement } from "lit";
declare const Checkbox_base: (new (...args: any[]) => import("../common/mixins/SizeMixin.js").SizeMixinInterface) & (new (...args: any[]) => import("../common/mixins/FormAssociatedMixin.js").FormAssociatedMixinInterface) & (new (...args: any[]) => import("../common/mixins/InputMixin.js").InputMixinInterface) & (new (...args: any[]) => import("../common/mixins/FocusableMixin.js").FocusableMixinInterface) & typeof LitElement;
/**
 * Checkboxes allow user to choose one or more options from a limited set of options.
 * If you have more than 10 options, please use Select component instead.
 *
 * @status ready
 * @category form
 * @slot label - Use when a label requires more than plain text.
 * @slot hint - Optional slot that holds hint text for the input.
 * @slot error - Optional slot that holds error text for the input.
 *
 * @cssprop [--n-label-color=var(--n-color-text)] - Controls the text color of the label, using our [color tokens](/tokens/#color).
 */
export default class Checkbox extends Checkbox_base {
    static styles: import("lit").CSSResult[];
    protected get formValue(): string | undefined;
    /**
     * Controls whether the checkbox is in an indeterminate state.
     */
    indeterminate: boolean;
    /**
     * Controls whether the checkbox is checked or not.
     */
    checked: boolean;
    render(): import("lit").TemplateResult<1>;
    protected handleChange(e: Event): void;
}
declare global {
    interface HTMLElementTagNameMap {
        "nord-checkbox": Checkbox;
    }
}
export {};
