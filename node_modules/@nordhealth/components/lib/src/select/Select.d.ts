import { LitElement } from "lit";
import "../button/Button.js";
declare const Select_base: (new (...args: any[]) => import("../common/mixins/SizeMixin.js").SizeMixinInterface) & (new (...args: any[]) => import("../common/mixins/FormAssociatedMixin.js").FormAssociatedMixinInterface) & (new (...args: any[]) => import("../common/mixins/AutocompleteMixin.js").AutocompleteMixinInterface) & (new (...args: any[]) => import("../common/mixins/InputMixin.js").InputMixinInterface) & (new (...args: any[]) => import("../common/mixins/FocusableMixin.js").FocusableMixinInterface) & typeof LitElement;
/**
 * Select lets users choose one option from an options menu.
 * Consider using select when you have 5 or more options to choose from.
 *
 * @status ready
 * @category form
 * @slot - Default slot for holding <option> elements.
 * @slot label - Use when a label requires more than plain text.
 * @slot hint - Use when a hint requires more than plain text.
 * @slot error - Optional slot that holds error text for the input.
 * @slot icon - Used to place an icon at the start of select.
 *
 * @cssprop [--n-select-block-size=var(--n-space-xl)] - Controls the block size, or height, of the select using our [spacing tokens](/tokens/#space).
 * @cssprop [--n-select-inline-size=fit-content] - Controls the inline size, or width, of the select.
 * @cssprop [--n-label-color=var(--n-color-text)] - Controls the text color of the label, using our [color tokens](/tokens/#color).
 */
export default class Select extends Select_base {
    static styles: import("lit").CSSResult[];
    protected get formValue(): string | undefined;
    private defaultSlot;
    private optionObserver?;
    protected inputId: string;
    firstUpdated(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    private setupOptionObserver;
    /**
     * Controls whether the select expands to fill the width of its container.
     */
    expand: boolean;
    render(): import("lit").TemplateResult<1>;
    private get options();
    private getButtonText;
    private renderOption;
}
declare global {
    interface HTMLElementTagNameMap {
        "nord-select": Select;
    }
}
export {};
