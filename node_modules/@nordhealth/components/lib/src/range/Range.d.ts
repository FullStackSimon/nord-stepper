import { LitElement } from "lit";
declare const Range_base: (new (...args: any[]) => import("../common/mixins/FormAssociatedMixin.js").FormAssociatedMixinInterface) & (new (...args: any[]) => import("../common/mixins/AutocompleteMixin.js").AutocompleteMixinInterface) & (new (...args: any[]) => import("../common/mixins/ReadonlyMixin.js").ReadonlyMixinInterface) & (new (...args: any[]) => import("../common/mixins/InputMixin.js").InputMixinInterface) & (new (...args: any[]) => import("../common/mixins/FocusableMixin.js").FocusableMixinInterface) & typeof LitElement;
/**
 * Range input lets user specify a numeric value using a slider which
 * must be no less than a given value, and no more than another given value.
 *
 * @status ready
 * @category form
 * @slot label - Use when a label requires more than plain text.
 * @slot hint - Optional slot that holds hint text for the input.
 * @slot error - Optional slot that holds error text for the input.
 *
 * @cssprop [--n-range-thumb-size=20px] - Controls the size of the thumb.
 * @cssprop [--n-range-track-color-active=var(--n-color-accent)] - Controls the color of the portion of the track that represents the current value.
 * @cssprop [--n-range-track-color-inactive=var(--n-color-border-strong)] - Controls the color of the portion of the track that represents the remaining value.
 * @cssprop [--n-range-track-size=3px] - Controls the height of the track.
 */
export default class Range extends Range_base {
    static styles: import("lit").CSSResult[];
    private direction;
    /**
     * Minimum value for the range slider.
     */
    min: number;
    /**
     * Maximum value for the range slider.
     */
    max: number;
    /**
     * Step amount for the range slider.
     */
    step: number;
    /**
     * Controls whether the input expands to fill the width of its container.
     */
    expand: boolean;
    render(): import("lit").TemplateResult<1>;
    protected handleInput(e: Event): void;
}
declare global {
    interface HTMLElementTagNameMap {
        "nord-range": Range;
    }
}
export {};
