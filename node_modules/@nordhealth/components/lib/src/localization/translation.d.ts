import en from "./en-us.js";
type PickStartsWith<T, Prefix extends string> = T extends `${Prefix}${string}` ? T : never;
export type Translation = typeof en;
export type WellKnownKeys = PickStartsWith<keyof Translation, "$">;
/**
 * Removes all registered translations
 */
export declare function clearTranslations(): void;
/**
 * Registers one or more translations
 */
export declare function registerTranslation(...translation: Translation[]): void;
/**
 * subscribe to document language changes
 * @param onChange callback for when document `lang` attr changes
 * @returns cleanup function
 */
export declare function subscribeToDocumentLang(onChange: () => void): () => void;
/**
 * subscribe to translation registration changes
 * @param onChange callback for when new translations are registered
 * @returns cleanup function
 */
export declare function subscribeToTranslationRegistration(onChange: () => void): () => void;
/**
 * Check whether there is a translation registered for the given lang
 * @param lang the lang code e.g. "en" or "en-GB"
 */
export declare function isTranslationRegistered(lang: string): boolean;
/**
 * Picks the most appropriate translation for the given language, from most specific to least specific.
 * First tries lang + region, then lang only, then fallback.
 */
export declare function resolveTranslation(langCode: string): {
    $lang: string;
    $name: string;
    $dir: "ltr" | "rtl";
    "nord-command-menu": {
        instructions: string;
        inputLabel: string;
        footerArrowKeys: string;
        footerEnterKey: string;
        footerEscapeKey: string;
        footerBackspaceKey: string;
        noResults: (searchTerm: string) => string;
        tip: string;
        placeholder: string;
    };
    "nord-calendar": {
        prevMonthLabel: string;
        nextMonthLabel: string;
        monthSelectLabel: string;
        yearSelectLabel: string;
    };
    "nord-date-picker": {
        modalHeading: string;
        closeLabel: string;
        buttonLabel: string;
        selectedDateMessage: string;
    };
    "nord-modal": {
        closeLabel: string;
    };
    "nord-nav-toggle": {
        label: string;
    };
    "nord-textarea": {
        remainingCharacters: (remainder: number) => string;
    };
    "nord-notification": {
        dismissLabel: string;
    };
    "nord-message": {
        unreadLabel: string;
    };
    "nord-tag": {
        removeLabel: string;
    };
};
export { en as fallback };
