import type { ReactiveController, ReactiveControllerHost } from "lit";
import { Translation, WellKnownKeys } from "./translation.js";
type Func = (...args: any[]) => any;
type Result<Type, Key extends keyof Type> = Type[Key] extends Func ? ReturnType<Type[Key]> : Type[Key];
type FuncParams<Type, K extends keyof Type> = Type[K] extends Func ? Parameters<Type[K]> : [];
export declare class LocalizeController<TComponentName extends Exclude<keyof Translation, WellKnownKeys>> implements ReactiveController {
    private host;
    private options;
    private unsubscribeDocumentLang?;
    private unsubscribeTranslationRegistration?;
    private observer?;
    private resolvedTranslation;
    constructor(host: ReactiveControllerHost & HTMLElement, options?: {
        onLangChange: () => void;
    });
    /**
     * The lang of the document or element, with element taking precedence
     */
    get lang(): string;
    /**
     * The lang of the translation being applied.
     * This may not match the document/element lang, in case of fallback translation
     */
    get resolvedLang(): string;
    hostConnected(): void;
    hostDisconnected(): void;
    term<Key extends keyof Translation[TComponentName]>(key: Key, ...args: FuncParams<Translation[TComponentName], Key>): Result<Translation[TComponentName], Key>;
    private handleLangChange;
}
export {};
